// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/21/2021 22:49:00"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          circuito_principal
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module circuito_principal_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [1:0] moedas;
reg [3:0] tecla;
// wires                                               
wire [3:0] codigo;
wire devolver_moedas;
wire [1:0] digito;
wire [3:0] displays;
wire [1:0] estados;
wire liberar;
wire produto_existe;
wire [7:0] segmentosA;
wire [7:0] segmentosB;
wire [7:0] segmentosC;
wire [7:0] segmentosD;
wire valor_correto;

// assign statements (if any)                          
circuito_principal i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.codigo(codigo),
	.devolver_moedas(devolver_moedas),
	.digito(digito),
	.displays(displays),
	.estados(estados),
	.liberar(liberar),
	.moedas(moedas),
	.produto_existe(produto_existe),
	.segmentosA(segmentosA),
	.segmentosB(segmentosB),
	.segmentosC(segmentosC),
	.segmentosD(segmentosD),
	.tecla(tecla),
	.valor_correto(valor_correto)
);
initial 
begin 
#1000000 $finish;
end 

// clk
initial
begin
	repeat(6)
	begin
		clk = 1'b0;
		clk = #80000 1'b1;
		# 80000;
	end
	clk = 1'b0;
end 
// tecla[ 3 ]
initial
begin
	tecla[3] = 1'b0;
end 
// tecla[ 2 ]
initial
begin
	tecla[2] = 1'b0;
end 
// tecla[ 1 ]
initial
begin
	tecla[1] = 1'b0;
	tecla[1] = #50000 1'b1;
	tecla[1] = #190000 1'b0;
end 
// tecla[ 0 ]
initial
begin
	tecla[0] = 1'b0;
end 
// moedas[ 1 ]
initial
begin
	moedas[1] = 1'b0;
	moedas[1] = #190000 1'b1;
	moedas[1] = #110000 1'b0;
end 
// moedas[ 0 ]
initial
begin
	moedas[0] = 1'b0;
	moedas[0] = #190000 1'b1;
	moedas[0] = #110000 1'b0;
end 
endmodule

